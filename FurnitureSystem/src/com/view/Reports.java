
package com.view;

import com.dao.Common;
import com.dao.Dao_Customer;
import com.dao.Dao_Orders;
import com.dao.Dao_Products;
import com.dao.Dao_Reports;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPCellEvent;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPTableEvent;
import com.itextpdf.text.pdf.PdfWriter;
import com.model.Order;
import com.model.OrderDetails;
import com.model.Product;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.sql.Date;
import java.text.NumberFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Month;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;


public class Reports extends javax.swing.JPanel implements PdfPCellEvent, PdfPTableEvent {

    
    private final static NumberFormat currency = NumberFormat.getCurrencyInstance(new Locale("en", "US"));
    private final static Font FONT_SIZE_18_BOLD = new Font(FontFamily.TIMES_ROMAN, 18f, Font.BOLD);
    private final static Font FONT_SIZE_12 = new Font(FontFamily.TIMES_ROMAN, 10f, Font.NORMAL);
    private final static Font FONT_SIZE_12_BOLD = new Font(FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
    private final static Font FONT_SIZE_14_BOLDITALIC = new Font(FontFamily.TIMES_ROMAN, 14f, Font.BOLDITALIC);
    private int numberOfOrders;
    private double totalAmount;
    private final String path = "D:\\Fair Deal\\Report";
    private final File f = new File(path);
    private static Date firstOfWeek;
    private static Date lastOfWeek;
    private static LocalDate firstOfMonth;
    private static LocalDate lastOfMonth;
    private static LocalDate firstOfYear;
    private static LocalDate lastOfYear;
    private static String time;
    private static String type;
    private static ArrayList<Object[]> array;
    ArrayList<Product> list = new ArrayList<>();
    DefaultTableModel tableModel = new DefaultTableModel();
    private final String revenue = "Revenue statistics";
    private final String revenuePro = "Revenue statistics by product";
    private final String revenueStaff = "Revenue statistics by staff";
    private final String daily = "Daily Report";
    private final String weekly = "Weekly report";
    private final String monthly = "Monthly report";
    private final String year = "Annual report";
    private final String no = "No.";
    private final String orderID = "Order ID";
    private final String cusName = "Customer Name";
    private final String transactionTime = "Transaction Time";
    private final String amount = "Total Amount";
    private final String orderDate = "Order Date";
    private final String totalOrder = "Total Orders";
    private final String month = "Month";
    private final String statisticDay = "Statistical Day";
    private final String to = "to";
    private final String totalRevenue = "Total Revenue", chartWeek = "Revenue chart by week", chartMonth = "Revenue chart by month", chartYear = "Revenue chart by year";
    private final String revenueChart = "Revenue chart";
    private String lbl5 = "Total Orders", lbl8 = "Total Revenue";

    public Reports() {
        initComponents();
        loadType();
        disableComponent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private void loadType() {
        cbxType.removeAllItems();
        cbxType.addItem(revenue);
        cbxType.addItem(revenuePro);
        cbxType.addItem(revenueStaff);
        cbxTime.removeAllItems();
        cbxTime.addItem(daily);
        cbxTime.addItem(weekly);
        cbxTime.addItem(monthly);
        cbxTime.addItem(year);
    }

    private void disableComponent() {
        btnChart.setEnabled(false);
        btnPrint.setEnabled(false);
    }

    private void refresh() {
        Object[] obj = new Object[]{};
        DefaultTableModel tableModel = new DefaultTableModel(obj, 0);
        tblReports.setModel(tableModel);
        jLabel5.setText("");
        jLabel8.setText("");
        btnChart.setEnabled(true);
        cbxType.removeAllItems();
        cbxType.addItem(revenue);
        cbxType.addItem(revenuePro);
        cbxType.addItem(revenueStaff);
        cbxTime.removeAllItems();
        cbxTime.addItem(daily);
        cbxTime.addItem(weekly);
        cbxTime.addItem(monthly);
        cbxTime.addItem(year);
    }

    private void createRevenueByDay() {
        Date today = Date.valueOf(LocalDate.now());
        Date tomorrow = Date.valueOf(LocalDate.now().plusDays(1));
        ArrayList arr = Dao_Orders.getOrders(today, tomorrow, "daily");

        tblReports.removeAll();
        Object[] obj = new Object[]{no, orderID, cusName, transactionTime, amount};
        DefaultTableModel tableModel = new DefaultTableModel(obj, 0);
        tblReports.setModel(tableModel);
        numberOfOrders = 0;
        totalAmount = 0;

        for (int i = 0; i < arr.size(); i++) {
            Object[] objReports = new Object[5];
            objReports[0] = i + 1;
            objReports[1] = ((Order) arr.get(i)).getOrderID();
            objReports[2] = Dao_Customer.getCustomerByID(((Order) arr.get(i)).getCustomerID()).getCustomerName();
            objReports[3] = ((Order) arr.get(i)).getOrderDate();
            objReports[4] = currency.format(((Order) arr.get(i)).getTotalAmount());
            tableModel.addRow(objReports);
            numberOfOrders++;
            totalAmount = totalAmount + ((Order) arr.get(i)).getTotalAmount();
        }

        jLabel5.setText(lbl5 + ": " + numberOfOrders);
        jLabel8.setText(lbl8 + ": " + currency.format(totalAmount));
    }

    private void createRevenueByWeek() {
        java.util.Date curr = new java.util.Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(curr);
        int currentDOW = cal.get(Calendar.DAY_OF_WEEK);
        cal.add(Calendar.DAY_OF_YEAR, (currentDOW * -1) + 1);
        java.util.Date d = new java.util.Date(cal.getTimeInMillis());
        Instant instant = d.toInstant();
        ZonedDateTime zdt = instant.atZone(ZoneId.systemDefault());
        LocalDate date = zdt.toLocalDate();
        firstOfWeek = Date.valueOf(date);
        lastOfWeek = Date.valueOf(date.plusDays(7));
        ArrayList arr = Dao_Orders.getOrders(firstOfWeek, lastOfWeek, "notdaily");

        tblReports.removeAll();
        Object[] obj = new Object[]{no, orderDate, totalOrder, amount};
        DefaultTableModel tableModel = new DefaultTableModel(obj, 0);
        tblReports.setModel(tableModel);
        numberOfOrders = 0;
        totalAmount = 0;
        LocalDate day;
        array = new ArrayList<>();

        for (int i = 0; i < 7; i++) {
            day = firstOfWeek.toLocalDate().plusDays(i);
            int dayOrders = 0;
            double dayAmount = 0;
            for (int j = 0; j < arr.size(); j++) {
                if (day.compareTo(((Date) ((Order) arr.get(j)).getOrderDate()).toLocalDate()) == 0) {
                    dayOrders++;
                    numberOfOrders++;
                    dayAmount = dayAmount + ((Order) arr.get(j)).getTotalAmount();
                    totalAmount = totalAmount + ((Order) arr.get(j)).getTotalAmount();
                }
            }
            if (day.isEqual(LocalDate.now()) || day.isBefore(LocalDate.now())) {
                Object[] objReports = new Object[4];
                objReports[0] = i + 1;
                objReports[1] = day;
                objReports[2] = dayOrders;
                objReports[3] = currency.format(dayAmount);
                tableModel.addRow(objReports);
                array.add(objReports);
            }
        }

        jLabel5.setText(lbl5 + ": " + numberOfOrders);
        jLabel8.setText(lbl8 + ": " + currency.format(totalAmount));
    }

    private void createRevenueByMonth() {
        YearMonth yearMonthNow = YearMonth.now();
        firstOfMonth = yearMonthNow.atDay(1);
        lastOfMonth = yearMonthNow.plusMonths(1).atDay(1);
        ArrayList arr = Dao_Orders.getOrders(Date.valueOf(firstOfMonth), Date.valueOf(lastOfMonth), "notdaily");
        tblReports.removeAll();
        Object[] obj = new Object[]{no, orderDate, totalOrder, amount};
        DefaultTableModel tableModel = new DefaultTableModel(obj, 0);
        tblReports.setModel(tableModel);
        numberOfOrders = 0;
        totalAmount = 0;
        LocalDate day;
        array = new ArrayList<>();
        for (int i = 0; i < yearMonthNow.atEndOfMonth().getDayOfMonth(); i++) {
            day = firstOfMonth.plusDays(i);
            int dayOrders = 0;
            double dayAmount = 0;
            for (int j = 0; j < arr.size(); j++) {
                if (day.compareTo(((Date) ((Order) arr.get(j)).getOrderDate()).toLocalDate()) == 0) {
                    dayOrders++;
                    numberOfOrders++;
                    dayAmount = dayAmount + ((Order) arr.get(j)).getTotalAmount();
                    totalAmount = totalAmount + ((Order) arr.get(j)).getTotalAmount();
                }
            }
            if (day.isEqual(LocalDate.now()) || day.isBefore(LocalDate.now())) {
                Object[] objReports = new Object[4];
                objReports[0] = i + 1;
                objReports[1] = day;
                objReports[2] = dayOrders;
                objReports[3] = currency.format(dayAmount);
                tableModel.addRow(objReports);
                array.add(objReports);
            }
        }
        jLabel5.setText(lbl5 + ": " + numberOfOrders);
        jLabel8.setText(lbl8 + ": " + currency.format(totalAmount));
    }

    private void createRevenueByYear() {
        YearMonth yearMonthNow = YearMonth.now();
        firstOfYear = YearMonth.of(yearMonthNow.getYear(), Month.JANUARY).atDay(1);
        lastOfYear = YearMonth.of(yearMonthNow.getYear(), Month.DECEMBER).atEndOfMonth().plusDays(1);
        ArrayList arr = Dao_Orders.getOrders(Date.valueOf(firstOfYear), Date.valueOf(lastOfYear), "notdaily");
        tblReports.removeAll();
        Object[] obj = new Object[]{no, month, totalOrder, amount};
        DefaultTableModel tableModel = new DefaultTableModel(obj, 0);
        tblReports.setModel(tableModel);
        numberOfOrders = 0;
        totalAmount = 0;
        int month;
        array = new ArrayList<>();
        for (int i = 1; i <= 12; i++) {
            month = i;
            int monthOrders = 0;
            double monthAmount = 0;
            for (int j = 0; j < arr.size(); j++) {
                if (((Date) ((Order) arr.get(j)).getOrderDate()).toLocalDate().getMonthValue() == month) {
                    monthOrders++;
                    numberOfOrders++;
                    monthAmount = monthAmount + ((Order) arr.get(j)).getTotalAmount();
                    totalAmount = totalAmount + ((Order) arr.get(j)).getTotalAmount();
                }
            }
            if (month <= yearMonthNow.getMonthValue()) {
                Object[] objReports = new Object[4];
                objReports[0] = i;
                objReports[1] = YearMonth.of(yearMonthNow.getYear(), month).getMonth().toString().substring(0, 1) + YearMonth.of(yearMonthNow.getYear(), month).getMonth().toString().substring(1).toLowerCase();
                objReports[2] = monthOrders;
                objReports[3] = currency.format(monthAmount);
                tableModel.addRow(objReports);
                array.add(objReports);
            }
        }
        jLabel5.setText(lbl5 + ": " + numberOfOrders);
        jLabel8.setText(lbl8 + ": " + currency.format(totalAmount));
    }

    private void exportPDF(String filename) {
        try {
            if (!f.exists()) {
                f.mkdirs();
                new Reports().createPdf(filename, numberOfOrders, totalAmount);
            } else {
                new Reports().createPdf(filename, numberOfOrders, totalAmount);
            }
        } catch (DocumentException | IOException ex) {
            Logger.getLogger(Reports.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void createPdf(String filename, int num, double total)
            throws DocumentException, IOException {

        Document document = new Document(PageSize.A4, 50, 50, 50, 50);

        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filename));

        document.open();

        document.add(getHeaderTable(writer));
        document.add(getIF(num, total));
        document.add(createRevenueTable());

        document.close();
    }

    public PdfPTable getHeaderTable(PdfWriter writer) throws DocumentException, IOException {
        Reports gp = new Reports();
        PdfPTable headertable = new PdfPTable(new float[]{4});
        headertable.setTableEvent(gp);
        headertable.getDefaultCell().setBorderWidth(0f);

        PdfPCell cell = new PdfPCell(new Phrase("REVENUE STATISTICS", FONT_SIZE_18_BOLD));
        cell.setColspan(4);
        cell.setRowspan(4);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        if (type.equals(revenue) && time.equals(daily)) {
            PdfPCell cell1 = new PdfPCell(new Phrase(statisticDay + ": " + LocalDate.now(), FONT_SIZE_14_BOLDITALIC));
            cell1.setColspan(4);
            cell1.setRowspan(4);
            cell1.setBorder(Rectangle.NO_BORDER);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);

            headertable.addCell(cell);
            headertable.addCell(cell1);
        } else if (type.equals(revenue) && time.equals(weekly)) {
            PdfPCell cell1 = new PdfPCell(new Phrase(statisticDay + ": " + firstOfWeek.toLocalDate() + " " + to + " " + LocalDate.now(), FONT_SIZE_14_BOLDITALIC));
            cell1.setColspan(4);
            cell1.setRowspan(4);
            cell1.setBorder(Rectangle.NO_BORDER);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);

            headertable.addCell(cell);
            headertable.addCell(cell1);
        } else if (type.equals(revenue) && time.equals(monthly)) {
            PdfPCell cell1 = new PdfPCell(new Phrase(statisticDay + ": " + firstOfMonth + " " + to + " " + LocalDate.now(), FONT_SIZE_14_BOLDITALIC));
            cell1.setColspan(4);
            cell1.setRowspan(4);
            cell1.setBorder(Rectangle.NO_BORDER);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);

            headertable.addCell(cell);
            headertable.addCell(cell1);
        } else if (type.equals(revenue) && time.equals(year)) {
            PdfPCell cell1 = new PdfPCell(new Phrase(statisticDay + ": " + firstOfYear + " " + to + " " + LocalDate.now(), FONT_SIZE_14_BOLDITALIC));
            cell1.setColspan(4);
            cell1.setRowspan(4);
            cell1.setBorder(Rectangle.NO_BORDER);
            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);

            headertable.addCell(cell);
            headertable.addCell(cell1);
        }

        return headertable;
    }

    @Override
    public void cellLayout(PdfPCell cell, Rectangle position,
            PdfContentByte[] canvases) {
    }

    @Override
    public void tableLayout(PdfPTable table, float[][] width, float[] height,
            int headerRows, int rowStart, PdfContentByte[] canvas) {
    }

    private PdfPTable getIF(int num, double total) {
        PdfPTable table = new PdfPTable(4);
        table.setSpacingBefore(25);
        PdfPCell cell = new PdfPCell(new Phrase(totalOrder + ": " + num, FONT_SIZE_12_BOLD));
        cell.setColspan(2);
        cell.setRowspan(2);
        cell.setBorder(Rectangle.NO_BORDER);

        PdfPCell cell1 = new PdfPCell(new Phrase(totalRevenue + ": " + currency.format(total), FONT_SIZE_12_BOLD));
        cell1.setColspan(2);
        cell1.setRowspan(2);
        cell1.setBorder(Rectangle.NO_BORDER);

        table.addCell(cell);
        table.addCell(cell1);
        return table;
    }

    private PdfPTable createRevenueTable() {
        PdfPTable table;
        if (type.equals(revenue) && time.equals(daily)) {
            table = new PdfPTable(5);
            table.setSpacingBefore(25);
            table.setSpacingAfter(25);
            PdfPCell c1 = new PdfPCell(new Phrase(no, FONT_SIZE_12));
            table.addCell(c1);
            PdfPCell c2 = new PdfPCell(new Phrase(orderID, FONT_SIZE_12));
            table.addCell(c2);
            PdfPCell c3 = new PdfPCell(new Phrase(cusName, FONT_SIZE_12));
            table.addCell(c3);
            PdfPCell c4 = new PdfPCell(new Phrase(transactionTime, FONT_SIZE_12));
            table.addCell(c4);
            PdfPCell c5 = new PdfPCell(new Phrase(amount, FONT_SIZE_12));
            table.addCell(c5);

            Date today = Date.valueOf(LocalDate.now());
            Date tomorrow = Date.valueOf(LocalDate.now().plusDays(1));
            ArrayList arr = Dao_Orders.getOrders(today, tomorrow, "daily");
            for (int i = 0; i < arr.size(); i++) {
                table.addCell(new Phrase(String.valueOf(i + 1), FONT_SIZE_12));
                table.addCell(new Phrase(((Order) arr.get(i)).getOrderID(), FONT_SIZE_12));
                table.addCell(new Phrase(Dao_Customer.getCustomerByID(((Order) arr.get(i)).getCustomerID()).getCustomerName(), FONT_SIZE_12));
                table.addCell(new Phrase(((Order) arr.get(i)).getOrderDate().toString(), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(((Order) arr.get(i)).getTotalAmount()), FONT_SIZE_12));
            }
            return table;
        } else if (type.equals(revenue) && time.equals(weekly)) {
            table = new PdfPTable(4);
            table.setSpacingBefore(25);
            table.setSpacingAfter(25);
            PdfPCell c1 = new PdfPCell(new Phrase(no, FONT_SIZE_12));
            table.addCell(c1);
            PdfPCell c2 = new PdfPCell(new Phrase(orderDate, FONT_SIZE_12));
            table.addCell(c2);
            PdfPCell c3 = new PdfPCell(new Phrase(totalOrder, FONT_SIZE_12));
            table.addCell(c3);
            PdfPCell c4 = new PdfPCell(new Phrase(amount, FONT_SIZE_12));
            table.addCell(c4);

            for (int i = 0; i < array.size(); i++) {
                Object[] obj = array.get(i);
                table.addCell(new Phrase(String.valueOf(obj[0]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[1]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[2]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[3]), FONT_SIZE_12));
            }
            return table;
        } else if (type.equals(revenue) && time.equals(monthly)) {
            table = new PdfPTable(4);
            table.setSpacingBefore(25);
            table.setSpacingAfter(25);
            PdfPCell c1 = new PdfPCell(new Phrase(no, FONT_SIZE_12));
            table.addCell(c1);
            PdfPCell c2 = new PdfPCell(new Phrase(orderDate, FONT_SIZE_12));
            table.addCell(c2);
            PdfPCell c3 = new PdfPCell(new Phrase(totalOrder, FONT_SIZE_12));
            table.addCell(c3);
            PdfPCell c4 = new PdfPCell(new Phrase(amount, FONT_SIZE_12));
            table.addCell(c4);

            for (int i = 0; i < array.size(); i++) {
                Object[] obj = array.get(i);
                table.addCell(new Phrase(String.valueOf(obj[0]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[1]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[2]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[3]), FONT_SIZE_12));
            }
            return table;
        } else if (type.equals(revenue) && time.equals(year)) {
            table = new PdfPTable(4);
            table.setSpacingBefore(25);
            table.setSpacingAfter(25);
            PdfPCell c1 = new PdfPCell(new Phrase(no, FONT_SIZE_12));
            table.addCell(c1);
            PdfPCell c2 = new PdfPCell(new Phrase(month, FONT_SIZE_12));
            table.addCell(c2);
            PdfPCell c3 = new PdfPCell(new Phrase(totalOrder, FONT_SIZE_12));
            table.addCell(c3);
            PdfPCell c4 = new PdfPCell(new Phrase(amount, FONT_SIZE_12));
            table.addCell(c4);

            for (int i = 0; i < array.size(); i++) {
                Object[] obj = array.get(i);
                table.addCell(new Phrase(String.valueOf(obj[0]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[1]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[2]), FONT_SIZE_12));
                table.addCell(new Phrase(String.valueOf(obj[3]), FONT_SIZE_12));
            }
            return table;
        }
        return null;
    }

    public JFreeChart createChart() {
        JFreeChart barChart = null;
        if (type.equals(revenue) && time.equals(weekly)) {
            barChart = ChartFactory.createBarChart(chartWeek,
                    orderDate, amount + " ($)",
                    createDataset(), PlotOrientation.VERTICAL, false, false, false);
        } else if (type.equals(revenue) && time.equals(monthly)) {
            YearMonth date = YearMonth.now();
            barChart = ChartFactory.createBarChart(chartMonth + " (" + date + ")",
                    orderDate, amount + " ($)",
                    createDataset(), PlotOrientation.VERTICAL, false, false, false);
        } else if (type.equals(revenue) && time.equals(year)) {
            YearMonth date = YearMonth.now();
            barChart = ChartFactory.createBarChart(chartYear + " (" + date.getYear() + ")",
                    month, amount + " ($)",
                    createDataset(), PlotOrientation.VERTICAL, false, false, false);
        }
        return barChart;
    }

    private CategoryDataset createDataset() {
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        if (type.equals(revenue) && time.equals(weekly)) {
            for (int i = 0; i < array.size(); i++) {
                Object[] obj = array.get(i);
                dataset.addValue(Double.parseDouble(obj[3].toString().substring(1).replace(",", "")), amount, obj[1].toString());
            }
        } else if (type.equals(revenue) && time.equals(monthly)) {
            for (int i = 0; i < array.size(); i++) {
                Object[] obj = array.get(i);
                LocalDate date = LocalDate.parse(obj[1].toString());
                dataset.addValue(Double.parseDouble(obj[3].toString().substring(1).replace(",", "")), amount, String.valueOf(date.getDayOfMonth()));
            }
        } else if (type.equals(revenue) && time.equals(year)) {
            for (int i = 0; i < array.size(); i++) {
                Object[] obj = array.get(i);
                dataset.addValue(Double.parseDouble(obj[3].toString().substring(1).replace(",", "")), amount, obj[1].toString());
            }
        }
        return dataset;
    }

    private void createRevenueChart() {
        ChartPanel chartPanel = new ChartPanel(createChart());
        chartPanel.setPreferredSize(new java.awt.Dimension(560, 367));
        JFrame frame = new JFrame();
        frame.add(chartPanel);
        frame.setTitle(revenueChart);
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null);
        frame.setResizable(true);
        frame.setVisible(true);
    }

    private void initable() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"ProductID", "ProductName", "SupplierID", "CategoryID", "UnitPrice", "SellPrice", "QuantityInStock", "Status"});
        tblReports.setModel(tableModel);
    }

    private void loadCategories() {
        try {

            Dao_Products dao = new Dao_Products();
            ArrayList<Product> list = new ArrayList<>();
            list = dao.searchAll();

            //List<Class_Orders> list3 = new ArrayList<>();
            tableModel.setRowCount(0);
            //  Class_OrderDetails OrderDetails = dao.searchOrder(txtid.getText());
            for (Product it : list) {

                tableModel.addRow(new Object[]{
                    it.getProductID(), it.getProductName(), it.getSupplierID(), it.getCategoryID(), it.getUnitPrice(), it.getSellPrice(), it.getQuantity(), it.getStatus()
                });

            }

            tableModel.fireTableDataChanged();
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cbxType = new javax.swing.JComboBox<>();
        btnCreate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReports = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbxTime = new javax.swing.JComboBox<>();
        btnChart = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(195, 213, 213));

        jPanel2.setBackground(new java.awt.Color(73, 105, 105));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Algerian", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/Bed.png"))); // NOI18N
        jLabel1.setText("Fair deal");

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Report");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/Out18.png"))); // NOI18N
        jLabel4.setText("Log Out");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(133, 173, 173));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/write.png"))); // NOI18N
        jLabel6.setText("Time");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/write.png"))); // NOI18N
        jLabel7.setText("Type of Report");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(133, 173, 173));

        cbxType.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbxTypePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cbxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTypeActionPerformed(evt);
            }
        });

        btnCreate.setBackground(new java.awt.Color(0, 0, 0));
        btnCreate.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/Add18.png"))); // NOI18N
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(0, 0, 0));
        btnReset.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/New.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        tblReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblReports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReportsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReports);

        btnPrint.setBackground(new java.awt.Color(0, 0, 0));
        btnPrint.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/Print.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(133, 173, 173));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        cbxTime.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbxTimePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        btnChart.setBackground(new java.awt.Color(0, 0, 0));
        btnChart.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        btnChart.setForeground(new java.awt.Color(255, 255, 255));
        btnChart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/Chart.png"))); // NOI18N
        btnChart.setText("Chart");
        btnChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChart, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbxTime, javax.swing.GroupLayout.Alignment.LEADING, 0, 440, Short.MAX_VALUE)
                            .addComponent(cbxType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(cbxType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChart, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        refresh();
        disableComponent();
    }//GEN-LAST:event_btnResetActionPerformed
    public void callReport() {
        String aa = String.valueOf(cbxType.getSelectedItem());
        if (aa.equals(revenueStaff)) {
            new Dao_Reports().Create();
        }
    }
    private void btnChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChartActionPerformed
        if (cbxType.getSelectedItem().toString().equals(revenue)) {
            createRevenueChart();
        } else if (cbxType.getSelectedItem().toString().equals(revenueStaff)) {
            callReport();
        }

    }//GEN-LAST:event_btnChartActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        type = cbxType.getSelectedItem().toString();
        if (type.equals(revenue)) {
            time = cbxTime.getSelectedItem().toString();
        }
        if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(daily)) {
            createRevenueByDay();
            btnPrint.setEnabled(true);
        } else if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(weekly)) {
            createRevenueByWeek();
            btnChart.setEnabled(true);
            btnPrint.setEnabled(true);
        } else if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(monthly)) {
            createRevenueByMonth();
            btnChart.setEnabled(true);
            btnPrint.setEnabled(true);
        } else if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(year)) {
            createRevenueByYear();
            btnChart.setEnabled(true);
            btnPrint.setEnabled(true);
        }

        String compo = String.valueOf(cbxType.getSelectedItem());

        if (compo.equals(revenueStaff)) {
            new Dao_Reports().createStaff(tblReports);
            btnChart.setEnabled(true);
        } else if (compo.equals(revenuePro)) {
            initable();
            loadCategories();
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void cbxTypePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbxTypePopupMenuWillBecomeInvisible
        disableComponent();
        jLabel5.setText("");
        jLabel8.setText("");
        Object[] obj = new Object[]{};
        DefaultTableModel tableModel = new DefaultTableModel(obj, 0);
        tblReports.setModel(tableModel);
        if (cbxType.getSelectedItem().toString().equals(revenue)) {
            cbxTime.removeAllItems();
            cbxTime.addItem(daily);
            cbxTime.addItem(weekly);
            cbxTime.addItem(monthly);
            cbxTime.addItem(year);
        } else {
            cbxTime.removeAllItems();
        }
    }//GEN-LAST:event_cbxTypePopupMenuWillBecomeInvisible

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        Login.mainAdmin.dispose();
        Login.jlogin.setLocationRelativeTo(null);
        Login.jlogin.setVisible(true);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        LocalDate date = LocalDate.now();
        if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(daily)) {
            String path1 = "D:\\Fair Deal\\Report\\Revenue statistics\\Daily";
            File file = new File(path1);
            if (!file.exists()) {
                file.mkdirs();
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Daily\\" + date + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            } else {
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Daily\\" + date + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            }
        } else if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(weekly)) {
            String path1 = "D:\\Fair Deal\\Report\\Revenue statistics\\Weekly";
            File file = new File(path1);
            if (!file.exists()) {
                file.mkdirs();
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Weekly\\" + date + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            } else {
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Weekly\\" + date + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            }
        } else if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(monthly)) {
            String path1 = "D:\\Fair Deal\\Report\\Revenue statistics\\Monthly";
            File file = new File(path1);
            if (!file.exists()) {
                file.mkdirs();
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Monthly\\" + date.getMonthValue() + "-" + date.getYear() + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            } else {
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Monthly\\" + date.getMonthValue() + "-" + date.getYear() + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            }
        } else if (cbxType.getSelectedItem().toString().equals(revenue) && cbxTime.getSelectedItem().toString().equals(year)) {
            String path1 = "D:\\Fair Deal\\Report\\Revenue statistics\\Year";
            File file = new File(path1);
            if (!file.exists()) {
                file.mkdirs();
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Year\\" + date.getYear() + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            } else {
                exportPDF("D:\\Fair Deal\\Report\\Revenue statistics\\Year\\" + date.getYear() + ".pdf");
                Common.notify("Export successfully!", "Notification", 1);
            }
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void cbxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTypeActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        cbxTime.addItem(daily);
        cbxTime.addItem(weekly);
        cbxTime.addItem(monthly);
        cbxTime.addItem(year);
    }//GEN-LAST:event_formComponentShown

    private void tblReportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReportsMouseClicked
        if (cbxType.getSelectedItem().toString().equals(revenuePro)) {
            java.util.Date date;
            try {

                int row = tblReports.getSelectedRow();
                if (row >= 0) {
                    String id = (String) tblReports.getValueAt(row, 0);

                    Dao_Products dao = new Dao_Products();
                    Product products = dao.search(id);
                    OrderDetails orderDetails = dao.searchOrderDetails(id);
                    //Class_Orders
                    // Class_Orders Orders = dao.searchOrder(id);
                    if (orderDetails != null) {

                        double ban = products.getSellPrice();
                        double mua = products.getUnitPrice();
                        int soluong = orderDetails.getQuantity();
                        jLabel5.setText("Total revenue: " + (ban) * soluong);
                        jLabel8.setText("Total profit: " + ((ban - mua) * soluong));
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_tblReportsMouseClicked

    private void cbxTimePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbxTimePopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTimePopupMenuWillBecomeInvisible


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChart;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cbxTime;
    private javax.swing.JComboBox<String> cbxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReports;
    // End of variables declaration//GEN-END:variables
}
